# This policy uses the Sentinel tfplan import to validate that
# the desired_capacity is always less than the max_capacity

##### Imports #####

import "tfplan"
import "strings"
import "types"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the asg of the instance
        if length(path) == 0 {
          # root module
          asg = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          asg = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the asg
        resources[asg] = r
      }
    }
  }

  return resources
}

# validate ASG desired_capacity size
validate_asg_size = func() {

  validated = true

  # Get all resources of specified type
  resource_instances = find_resources_from_plan("aws_autoscaling_group")

  # Loop through the resource instances
  for resource_instances as asg, r {

    # Skip resources that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", asg, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if (r.diff["type"].computed else false or
        r.diff["desired_capacity.#"].computed else false) is true {
      print("Desired capacity", asg,
            "has attributes, type and/or cidr_blocks that are computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # validated = false
    } else {
      # validate the desired_capacity is less than the max_size
      if r.applied.desired_capacity > r.applied.max_size {
        print("ASG ", asg, "of type desired_capacity",
              "is greater than max_size" )
        validated = false
      }
    } // end computed check

  } // end resource instances

  return validated
}

##### Rules #####

# Call the validation function and assign results
asgs_validated = validate_asg_size()

# Main rule
main = rule {
  asgs_validated
}
